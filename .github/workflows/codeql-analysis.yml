name: "CodeQL Analysis"

on:
  push:
    branches: ["main"]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: ["main"]

permissions:
  contents: read

jobs:
  analyze:
    name: Analyze code
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ["csharp", "python"]
        # CodeQL supports [ csharp, cpp, go, java, javascript, python, ruby ]
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          # We must fetch all history for CodeQL to correctly analyze commits
          fetch-depth: 0

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@60168efe1c415ce0f5521ea06d5c2062adbeed1b # v3.28.17
        with:
          languages: ${{ matrix.language }}
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with "+" to use these queries and those in the config file.

      # Autobuild attempts to build any compiled languages (C/C++, C#, or Java).
      # If this step fails, then you should remove it and run the build manually.
      # For .NET Core, ensure that the .NET SDK is available.
      # You might need to add a setup-dotnet step if not using a GitHub-hosted runner with it pre-installed.
      - name: Setup .NET
        if: matrix.language == 'csharp'
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.x

      - name: Prepare SDL3 Prebuilt Binaries (for C#)
        if: matrix.language == 'csharp'
        run: |
          echo "Runner OS is ubuntu-latest. Looking for Linux SDL3 prebuilt binary ZIP files in lib/SDL3-Prebuilt/linux..."
          SDL_PREBUILT_DIR="lib/SDL3-Prebuilt"

          if ! command -v unzip &> /dev/null; then
            echo "Error: unzip command not found. Please ensure it's installed on the runner."
            exit 1
          fi

          TARGET_ZIP_BASENAME="linux"
          TARGET_PLATFORM_DIR_NAME="linux" # Using a distinct name for the directory part

          # Define the full path to the platform-specific directory
          PLATFORM_DIR_PATH="$SDL_PREBUILT_DIR/$TARGET_PLATFORM_DIR_NAME"
          # Define the expected archive names within that platform directory
          PLATFORM_ARCHIVE_PATH="$PLATFORM_DIR_PATH/$TARGET_ZIP_BASENAME.zip"
          PLATFORM_ARCHIVE_ALT_PATH="$PLATFORM_DIR_PATH/$TARGET_ZIP_BASENAME-binaries.zip"
          # The extraction directory is the platform-specific directory itself
          EXTRACTION_DIR="$PLATFORM_DIR_PATH"

          echo "Attempting to extract for $TARGET_PLATFORM_DIR_NAME from $PLATFORM_DIR_PATH into $EXTRACTION_DIR..."
          # Ensure the platform directory exists before trying to access files within it or extract into it.
          mkdir -p "$EXTRACTION_DIR"

          if [ -f "$PLATFORM_ARCHIVE_PATH" ]; then
            echo "Extracting $TARGET_PLATFORM_DIR_NAME binaries from $PLATFORM_ARCHIVE_PATH into $EXTRACTION_DIR/ ..."
            unzip -qo "$PLATFORM_ARCHIVE_PATH" -d "$EXTRACTION_DIR/"
            echo "Extracted $TARGET_PLATFORM_DIR_NAME binaries from $PLATFORM_ARCHIVE_PATH."
          elif [ -f "$PLATFORM_ARCHIVE_ALT_PATH" ]; then
            echo "Extracting $TARGET_PLATFORM_DIR_NAME binaries from $PLATFORM_ARCHIVE_ALT_PATH into $EXTRACTION_DIR/ ..."
            unzip -qo "$PLATFORM_ARCHIVE_ALT_PATH" -d "$EXTRACTION_DIR/"
            echo "Extracted $TARGET_PLATFORM_DIR_NAME binaries from $PLATFORM_ARCHIVE_ALT_PATH."
          else
            echo "Info: No $TARGET_PLATFORM_DIR_NAME SDL binaries ZIP found (checked for $PLATFORM_ARCHIVE_PATH and $PLATFORM_ARCHIVE_ALT_PATH). Build might fail if these are required."
          fi

          echo "Final listing of contents in $SDL_PREBUILT_DIR after extraction attempts:"
          ls -R "$SDL_PREBUILT_DIR"
        shell: bash
      - name: Autobuild
        if: matrix.language == 'csharp'
        uses: github/codeql-action/autobuild@60168efe1c415ce0f5521ea06d5c2062adbeed1b # v3.28.17

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@60168efe1c415ce0f5521ea06d5c2062adbeed1b # v3.28.17
        with:
          category: "/language:${{matrix.language}}"
